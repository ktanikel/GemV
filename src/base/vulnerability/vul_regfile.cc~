#include "base/vulnerability/vul_regfile.hh"

RegVulCalc::RegVulCalc(int numInts, int numFloats)
{
    numIntRegs = numInts;
    numFloatRegs = numFloats;
    numRegs = numIntRegs + numFloatRegs;
     
    for(unsigned i = 0; i < numRegs; ++i) {
        History h;
        histories.push_back(h);
    }

}

RegVulCalc::~RegVulCalc()
{

}

long
RegVulCalc::vulOnRead(int idx, bool isInt)
{
    long vul = 0;
    int reg_size = isInt ? INT_REG_SIZE : FLOAT_REG_SIZE;
    
    assert(idx < numRegs);
    
    vul += (curTick() - histories[idx].t) * reg_size;
    histories[idx].op = READ;
    histories[idx].t = curTick();

    return vul/TICKS_PER_CYCLE;

}

void 
RegVulCalc::vulOnWrite(int idx, bool isInt)
{
    assert(idx < numRegs);

    histories[idx].op = WRITE;
    histories[idx].incomingTick = curTick();
    histories[idx].t = curTick();
}
